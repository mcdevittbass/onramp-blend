[{"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/index.tsx":"1","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Main.tsx":"2","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostList.tsx":"3","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/App.tsx":"4","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Search.tsx":"5","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WritePost.tsx":"6","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Favorites.tsx":"7","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WriteButton.tsx":"8","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostById.tsx":"9","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/reportWebVitals.ts":"10","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/ReturnHome.tsx":"11"},{"size":547,"mtime":1611251633327,"results":"12","hashOfConfig":"13"},{"size":2337,"mtime":1611361737246,"results":"14","hashOfConfig":"13"},{"size":2659,"mtime":1611373930432,"results":"15","hashOfConfig":"13"},{"size":684,"mtime":1611359572442,"results":"16","hashOfConfig":"13"},{"size":2145,"mtime":1611331062395,"results":"17","hashOfConfig":"13"},{"size":5239,"mtime":1611360931413,"results":"18","hashOfConfig":"13"},{"size":1296,"mtime":1611331314917,"results":"19","hashOfConfig":"13"},{"size":520,"mtime":1611336145041,"results":"20","hashOfConfig":"13"},{"size":1150,"mtime":1611373648552,"results":"21","hashOfConfig":"13"},{"size":425,"mtime":1611175795640,"results":"22","hashOfConfig":"13"},{"size":476,"mtime":1611337926157,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"qy9wzv",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/index.tsx",[],["53","54"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Main.tsx",["55"],"import React, { useEffect, useState } from 'react';\nimport { Row, Button } from 'reactstrap';\nimport Search from './Search';\nimport PostList from './PostList';\nimport FavoriteButton from './Favorites';\nimport WriteButton from './WriteButton';\nimport data from '../../MOCK_DATA.json';\n\nexport interface IBlogPost {\n    blogId: number;\n    title: string;\n    author: string;\n    previewText?: string | null;\n    fullText?: string;\n    favorite: boolean;\n    date: string;\n}\n\nexport const Header = () => {\n    const handleSignOut = (e: React.MouseEvent<HTMLButtonElement>): void => {\n        console.log(\"clicked signout\")\n    }\n\n    return (\n        <Row id='header' className='m-2 p-3 justify-content-end'>\n            <Button id='signout-button' onClick={handleSignOut}>Sign Out</Button>\n        </Row>\n    )\n}\n\nconst Main = () => {\n    const [blogData, setBlogData] = useState<IBlogPost[]>(data);\n    const [title, setTitle] = useState<string>('');\n    const [author, setAuthor] = useState<string>('');\n    const [list, setList] = useState<IBlogPost[]>(blogData);\n\n\n    //move this logic to PostList?\n    useEffect(() => {\n        switch(true) {\n            // !! forces conversion to boolean\n            case !!title:\n                console.log(title)\n                const titleFilter:IBlogPost[] = blogData.filter((blog:IBlogPost) => {\n                    return blog.title.toLowerCase().includes(title.toLowerCase()); \n                });\n                setList(titleFilter);\n                break;\n            case !!author:\n                console.log(author);\n                const authorFilter:IBlogPost[] = blogData.filter((blog:IBlogPost) => {\n                    return blog.author.toLowerCase().includes(author.toLowerCase()); \n                });\n                setList(authorFilter);\n                break;\n            default:\n                setList(blogData);\n        }\n    }, [title, author, blogData]);\n\n    return (\n        <>\n            <Header />\n            <Row className='align-items-center'>\n                <Search setTitle={setTitle} setAuthor={setAuthor}/>\n                <FavoriteButton blogData={blogData} setList={setList}/>\n                <WriteButton />\n            </Row>\n            <Row>\n                <PostList blogData={list} />\n            </Row>\n        </>\n    )\n}\n\nexport default Main;",["56","57"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostList.tsx",["58"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/App.tsx",["59"],"import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/blog/Main';\nimport WritePost from './components/blog/WritePost';\nimport Post from './components/blog/PostById';\nimport blogData from './MOCK_DATA.json';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/main' component={Main} />\n        <Route path='/main/:blogId' render={() => <Post blogData={blogData} />} />\n        <Route path='/write' component={WritePost} />\n        <Redirect to='/main' />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Search.tsx",["60"],"import React, { useState } from 'react';\nimport { Form, Input, Button, Col, Row, FormGroup, Label } from 'reactstrap';\n\ntype TSearchProps = { \n    setTitle: (title:string)=>void, \n    setAuthor: (author:string)=>void\n};\n\nconst Search = ({ setTitle, setAuthor } :TSearchProps) => {\n    // const [localTitle, setLocalTitle] = useState<string>('');\n    // const [localAuthor, setLocalAuthor] = useState<string>('');\n    const [selected, setSelected] = useState<string>('title');\n    const [localValue, setLocalValue] = useState<string>('');\n\n    const handleChangeParam = (e: React.ChangeEvent<HTMLInputElement>):void => {\n        setTitle('');\n        setAuthor('');\n        let paramValue = e.target.value;\n        setSelected(paramValue);\n    }\n\n    const handleSetParams = (e: React.ChangeEvent<HTMLInputElement>):void => {\n        e.preventDefault();\n        setLocalValue(e.target.value);\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>):void => {\n        e.preventDefault();\n        if(selected == 'title') {\n            setTitle(localValue);\n        } else {\n            setAuthor(localValue);\n        }\n    }\n\n    return (\n        <Col>\n            <Form className='m-4 p-2 w-100' onSubmit={handleSubmit} inline>\n                <Row>\n                    <FormGroup>\n                        <Label for='searchParam' className='mr-2'>Search by </Label>\n                        <Input type='select' name='searchParam' id='searchParam' onChange={handleChangeParam}>\n                            <option value='title'>Title</option>\n                            <option value='author'>Author</option>\n                        </Input>\n                    </FormGroup>\n                    <FormGroup className='m-2'>\n                        <Input type='text' id={selected} name={selected} value={localValue || ''} onChange={handleSetParams} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Button type='submit' className='btn btn-success m-2'>Search</Button>\n                    </FormGroup>\n                </Row>\n            </Form>\n        </Col>\n    )\n}\n\nexport default Search;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WritePost.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Favorites.tsx",["61","62","63"],"import React, { useState } from 'react';\nimport { Col, Button, FormGroup, Label, Input } from 'reactstrap';\nimport { IBlogPost } from './Main';\n\ntype TFaveProps = { \n    blogData: IBlogPost[],\n    setList: (list:React.SetStateAction<IBlogPost[]>)=>void \n}\n\nconst FavoriteButton = ({ blogData, setList }:TFaveProps) => {\n    const [checked, setChecked] = useState('');\n\n    const handleShowFavorites = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let checkValue = event.target.value;\n        if(checkValue == '') {\n            const favorites = blogData.filter((post:IBlogPost) => {\n                return post.favorite == true;\n            });\n            setChecked('fave');\n            setList(favorites);\n        } else {\n            setChecked('');\n            setList(blogData);\n        }\n    }\n\n    return (\n        <Col className='col-12 m-2 m-md-0 col-md-3 text-center'>\n            <FormGroup check>\n                <Label check>\n                    <Input type='checkbox' name='fave' value={checked} onChange={handleShowFavorites}></Input>\n                    Show My Favorites\n                </Label>\n            </FormGroup>\n            {/* <Button onClick={handleShowFavorites}>Show My Favorites</Button> */}\n        </Col>\n    )\n}\n\nexport default FavoriteButton;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WriteButton.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostById.tsx",["64","65"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/reportWebVitals.ts",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/ReturnHome.tsx",[],["66","67"],{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":32,"column":22,"nodeType":"74","messageId":"75","endLine":32,"endColumn":33},{"ruleId":"68","replacedBy":"76"},{"ruleId":"70","replacedBy":"77"},{"ruleId":"72","severity":1,"message":"78","line":1,"column":43,"nodeType":"74","messageId":"75","endLine":1,"endColumn":51},{"ruleId":"72","severity":1,"message":"79","line":3,"column":8,"nodeType":"74","messageId":"75","endLine":3,"endColumn":12},{"ruleId":"80","severity":1,"message":"81","line":29,"column":21,"nodeType":"82","messageId":"83","endLine":29,"endColumn":23},{"ruleId":"72","severity":1,"message":"84","line":2,"column":15,"nodeType":"74","messageId":"75","endLine":2,"endColumn":21},{"ruleId":"80","severity":1,"message":"81","line":15,"column":23,"nodeType":"82","messageId":"83","endLine":15,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":17,"column":38,"nodeType":"82","messageId":"83","endLine":17,"endColumn":40},{"ruleId":"72","severity":1,"message":"85","line":1,"column":17,"nodeType":"74","messageId":"75","endLine":1,"endColumn":26},{"ruleId":"80","severity":1,"message":"81","line":17,"column":28,"nodeType":"82","messageId":"83","endLine":17,"endColumn":30},{"ruleId":"68","replacedBy":"86"},{"ruleId":"70","replacedBy":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"@typescript-eslint/no-unused-vars","'setBlogData' is assigned a value but never used.","Identifier","unusedVar",["88"],["89"],"'useState' is defined but never used.","'logo' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","'useEffect' is defined but never used.",["88"],["89"],"no-global-assign","no-unsafe-negation"]