[{"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/index.tsx":"1","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Main.tsx":"2","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostList.tsx":"3","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/App.tsx":"4","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Search.tsx":"5","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WritePost.tsx":"6","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WriteButton.tsx":"7","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostById.tsx":"8","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/reportWebVitals.ts":"9","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/ReturnHome.tsx":"10","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Login.tsx":"11","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteCheckBox.tsx":"12","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteIcon.tsx":"13","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/TrashIcon.tsx":"14","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Landing.tsx":"15","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/CreateAccount.tsx":"16"},{"size":547,"mtime":1611251633327,"results":"17","hashOfConfig":"18"},{"size":1650,"mtime":1611447163625,"results":"19","hashOfConfig":"18"},{"size":2014,"mtime":1611443054383,"results":"20","hashOfConfig":"18"},{"size":1488,"mtime":1611443757161,"results":"21","hashOfConfig":"18"},{"size":2817,"mtime":1611426657859,"results":"22","hashOfConfig":"18"},{"size":5249,"mtime":1611444454414,"results":"23","hashOfConfig":"18"},{"size":511,"mtime":1611442736500,"results":"24","hashOfConfig":"18"},{"size":1688,"mtime":1611441815481,"results":"25","hashOfConfig":"18"},{"size":425,"mtime":1611175795640,"results":"26","hashOfConfig":"18"},{"size":476,"mtime":1611337926157,"results":"27","hashOfConfig":"18"},{"size":3127,"mtime":1611447353372,"results":"28","hashOfConfig":"18"},{"size":1136,"mtime":1611426613876,"results":"29","hashOfConfig":"18"},{"size":1644,"mtime":1611444087839,"results":"30","hashOfConfig":"18"},{"size":1088,"mtime":1611444093392,"results":"31","hashOfConfig":"18"},{"size":1200,"mtime":1611446107444,"results":"32","hashOfConfig":"18"},{"size":3893,"mtime":1611447375452,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"qy9wzv",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/index.tsx",[],["73","74"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Main.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostList.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/App.tsx",["75"],"import React, { useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport './App.css';\nimport Main from './components/blog/Main';\nimport WritePost from './components/blog/WritePost';\nimport Post from './components/blog/PostById';\nimport data from './MOCK_DATA.json';\nimport LandingPage from './components/auth/Landing';\n\nconst confirmedJSONString = JSON.stringify(data);\nconst parsedData:IBlogPost[] = JSON.parse(confirmedJSONString);\n\nexport interface IBlogPost {\n  blogId: number;\n  title: string;\n  author: string;\n  previewText?: string | null;\n  fullText?: string;\n  favorite: boolean;\n  date: string;\n}\n\n\nfunction App() {\n  const [blogData, setBlogData] = useState<IBlogPost[]>(parsedData);\n  const [list, setList] = useState<IBlogPost[]>(blogData);\n  const [favorites, setFavorites] = useState<IBlogPost[]>(blogData.filter(post => post.favorite === true));\n\n  return (\n    <Router>\n      <Switch>\n        <Route path='/landing' component={LandingPage} />\n        <Route exact path='/main' render={() => <Main blogData={blogData} list={list} setList={setList} favorites={favorites} setFavorites={setFavorites} />} />\n        <Route path='/main/:blogId' render={() => <Post blogData={blogData} list={list} setList={setList} favorites={favorites} setFavorites={setFavorites} />} />\n        <Route path='/write' component={WritePost} />\n        <Redirect to='/main' />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n",["76","77"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Search.tsx",["78"],"import React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, Col, Row, FormGroup, Label } from 'reactstrap';\nimport { IBlogPost } from '../../App';\n\ntype TSearchProps = { \n    blogData: IBlogPost[], \n    setList: (list:React.SetStateAction<IBlogPost[]>)=>void \n};\n\nconst Search = ({ blogData, setList } :TSearchProps) => {\n    const [selected, setSelected] = useState<string>('title');\n    const [selectedValue, setSelectedValue] = useState<string>('');\n\n\n    const handleChangeParam = (e: React.ChangeEvent<HTMLInputElement>):void => {\n        setSelectedValue('');\n        let paramValue = e.target.value;\n        setSelected(paramValue);\n    }\n\n    const handleSetParamValue = (e: React.ChangeEvent<HTMLInputElement>):void => {\n        e.preventDefault();\n        setSelectedValue(e.target.value);\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>):void => {\n        e.preventDefault();\n        if(selectedValue.length > 0) {\n            switch(selected) {\n                case 'title':\n                    const titleFilter:IBlogPost[] = blogData.filter((blog:IBlogPost) => {\n                        return blog.title.toLowerCase().includes(selectedValue.toLowerCase()); \n                    });\n                    setList(titleFilter);\n                    break;\n                case 'author':\n                    const authorFilter:IBlogPost[] = blogData.filter((blog:IBlogPost) => {\n                        return blog.author.toLowerCase().includes(selectedValue.toLowerCase()); \n                    });\n                    setList(authorFilter);\n                    break;\n                default:\n                    console.error(\"There was a problem with the select element.\")\n            }\n        } else {\n            setList(blogData);\n        }\n    }\n\n    return (\n        <Col>\n            <Form className='m-4 p-2 w-100' onSubmit={handleSubmit} inline>\n                <Row>\n                    <FormGroup>\n                        <Label for='searchParam' className='mr-2'>Search by </Label>\n                        <Input type='select' name='searchParam' id='searchParam' onChange={handleChangeParam}>\n                            <option value='title'>Title</option>\n                            <option value='author'>Author</option>\n                        </Input>\n                    </FormGroup>\n                    <FormGroup className='m-2'>\n                        <Input type='text' id={selected} name={selected} value={selectedValue} onChange={handleSetParamValue} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Button type='submit' className='btn btn-success m-2'>Search</Button>\n                    </FormGroup>\n                </Row>\n            </Form>\n        </Col>\n    )\n}\n\nexport default Search;",["79","80"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WritePost.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WriteButton.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostById.tsx",["81","82","83"],"import React, { SetStateAction, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Card, CardText, CardTitle, CardSubtitle, CardBody, Row, Col} from 'reactstrap';\nimport { Header } from './Main';\nimport { IBlogPost } from '../../App';\nimport { dateSwitcharoo } from './PostList';\nimport FavoriteIcon from './FavoriteIcon';\nimport TrashIcon from './TrashIcon';\nimport { IMainProps } from './Main';\n\n\ntype TParam = { blogId: string };\n\nconst Post = ({ blogData, list, setList, favorites, setFavorites }:IMainProps) => {\n\n    const { blogId }:TParam = useParams();\n\n    //an array with one object in it (blogIds must be unique)\n    const currentBlog:IBlogPost[] = blogData.filter((blog: IBlogPost) => {\n        let blogNumId = parseInt(blogId);\n        return blog.blogId == blogNumId;\n    });\n    const thisBlog = currentBlog[0];\n\n    return (\n        <>\n            <Header />\n            <Card>\n                <CardBody>\n                    <CardTitle tag='h4'>{thisBlog.title}</CardTitle>\n                    <CardSubtitle tag='h5'>Written by {thisBlog.author}</CardSubtitle>\n                    <Row className='justify-content-between'>\n                        <CardText>{dateSwitcharoo(thisBlog.date)}</CardText>\n                        <Col>\n                            <FavoriteIcon post={thisBlog} favorites={favorites} setFavorites={setFavorites}/>\n                            <TrashIcon post={thisBlog} list={list} setList={setList}/>\n                        </Col>\n                    </Row>\n                    <CardText>{currentBlog[0].fullText}</CardText>\n                </CardBody>\n            </Card>\n        </>\n    )\n}\n\nexport default Post;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/reportWebVitals.ts",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/ReturnHome.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Login.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteCheckBox.tsx",["84"],"import React, { useState } from 'react';\nimport { Col, Button, FormGroup, Label, Input } from 'reactstrap';\nimport { IBlogPost } from '../../App';\n\ntype TFaveProps = { \n    blogData: IBlogPost[],\n    favorites: IBlogPost[],\n    setList: (list:React.SetStateAction<IBlogPost[]>)=>void \n}\n\nconst FavoriteCheckBox = ({ blogData, setList, favorites }:TFaveProps) => {\n    const [checked, setChecked] = useState('');\n    \n    const handleShowFavorites = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let checkValue = event.target.value;\n        if(checkValue.length < 1) {\n            setChecked('fave');\n            setList(favorites);\n        } else {\n            setChecked('');\n            setList(blogData);\n        }\n    }\n\n    return (\n        <Col className='col-12 m-2 m-md-0 col-md-3 text-center'>\n            <FormGroup check>\n                <Label check>\n                    <Input type='checkbox' name='fave' value={checked} onChange={handleShowFavorites}></Input>\n                    Show My Favorites\n                </Label>\n            </FormGroup>\n        </Col>\n    )\n}\n\nexport default FavoriteCheckBox;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteIcon.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/TrashIcon.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Landing.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/CreateAccount.tsx",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":25,"column":20,"nodeType":"91","messageId":"92","endLine":25,"endColumn":31},{"ruleId":"85","replacedBy":"93"},{"ruleId":"87","replacedBy":"94"},{"ruleId":"89","severity":1,"message":"95","line":1,"column":27,"nodeType":"91","messageId":"92","endLine":1,"endColumn":36},{"ruleId":"85","replacedBy":"96"},{"ruleId":"87","replacedBy":"97"},{"ruleId":"89","severity":1,"message":"98","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":31},{"ruleId":"89","severity":1,"message":"95","line":1,"column":33,"nodeType":"91","messageId":"92","endLine":1,"endColumn":42},{"ruleId":"99","severity":1,"message":"100","line":21,"column":28,"nodeType":"101","messageId":"102","endLine":21,"endColumn":30},{"ruleId":"89","severity":1,"message":"103","line":2,"column":15,"nodeType":"91","messageId":"92","endLine":2,"endColumn":21},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"@typescript-eslint/no-unused-vars","'setBlogData' is assigned a value but never used.","Identifier","unusedVar",["104"],["105"],"'useEffect' is defined but never used.",["104"],["105"],"'SetStateAction' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]