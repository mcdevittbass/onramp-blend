[{"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/index.tsx":"1","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Main.tsx":"2","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostList.tsx":"3","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/App.tsx":"4","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Search.tsx":"5","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WritePost.tsx":"6","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WriteButton.tsx":"7","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostById.tsx":"8","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/reportWebVitals.ts":"9","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/ReturnHome.tsx":"10","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Login.tsx":"11","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteCheckBox.tsx":"12","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteIcon.tsx":"13","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/TrashIcon.tsx":"14","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Landing.tsx":"15","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/CreateAccount.tsx":"16"},{"size":547,"mtime":1611251633327,"results":"17","hashOfConfig":"18"},{"size":1644,"mtime":1611583914860,"results":"19","hashOfConfig":"18"},{"size":2087,"mtime":1611589286792,"results":"20","hashOfConfig":"18"},{"size":2072,"mtime":1611589077240,"results":"21","hashOfConfig":"18"},{"size":2817,"mtime":1611426657859,"results":"22","hashOfConfig":"18"},{"size":5300,"mtime":1611586281362,"results":"23","hashOfConfig":"18"},{"size":511,"mtime":1611442736500,"results":"24","hashOfConfig":"18"},{"size":1688,"mtime":1611588420608,"results":"25","hashOfConfig":"18"},{"size":425,"mtime":1611175795640,"results":"26","hashOfConfig":"18"},{"size":476,"mtime":1611337926157,"results":"27","hashOfConfig":"18"},{"size":3127,"mtime":1611447353372,"results":"28","hashOfConfig":"18"},{"size":1449,"mtime":1611588420608,"results":"29","hashOfConfig":"18"},{"size":1727,"mtime":1611588420608,"results":"30","hashOfConfig":"18"},{"size":1088,"mtime":1611588420608,"results":"31","hashOfConfig":"18"},{"size":1200,"mtime":1611446107444,"results":"32","hashOfConfig":"18"},{"size":3893,"mtime":1611447375452,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"qy9wzv",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/index.tsx",[],["73","74"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Main.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostList.tsx",["75"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/App.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Search.tsx",["76"],"import React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, Col, Row, FormGroup, Label } from 'reactstrap';\nimport { IBlogPost } from '../../App';\n\ntype TSearchProps = { \n    blogData: IBlogPost[], \n    setList: (list:React.SetStateAction<IBlogPost[]>)=>void \n};\n\nconst Search = ({ blogData, setList } :TSearchProps) => {\n    const [selected, setSelected] = useState<string>('title');\n    const [selectedValue, setSelectedValue] = useState<string>('');\n\n\n    const handleChangeParam = (e: React.ChangeEvent<HTMLInputElement>):void => {\n        setSelectedValue('');\n        let paramValue = e.target.value;\n        setSelected(paramValue);\n    }\n\n    const handleSetParamValue = (e: React.ChangeEvent<HTMLInputElement>):void => {\n        e.preventDefault();\n        setSelectedValue(e.target.value);\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>):void => {\n        e.preventDefault();\n        if(selectedValue.length > 0) {\n            switch(selected) {\n                case 'title':\n                    const titleFilter:IBlogPost[] = blogData.filter((blog:IBlogPost) => {\n                        return blog.title.toLowerCase().includes(selectedValue.toLowerCase()); \n                    });\n                    setList(titleFilter);\n                    break;\n                case 'author':\n                    const authorFilter:IBlogPost[] = blogData.filter((blog:IBlogPost) => {\n                        return blog.author.toLowerCase().includes(selectedValue.toLowerCase()); \n                    });\n                    setList(authorFilter);\n                    break;\n                default:\n                    console.error(\"There was a problem with the select element.\")\n            }\n        } else {\n            setList(blogData);\n        }\n    }\n\n    return (\n        <Col>\n            <Form className='m-4 p-2 w-100' onSubmit={handleSubmit} inline>\n                <Row>\n                    <FormGroup>\n                        <Label for='searchParam' className='mr-2'>Search by </Label>\n                        <Input type='select' name='searchParam' id='searchParam' onChange={handleChangeParam}>\n                            <option value='title'>Title</option>\n                            <option value='author'>Author</option>\n                        </Input>\n                    </FormGroup>\n                    <FormGroup className='m-2'>\n                        <Input type='text' id={selected} name={selected} value={selectedValue} onChange={handleSetParamValue} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Button type='submit' className='btn btn-success m-2'>Search</Button>\n                    </FormGroup>\n                </Row>\n            </Form>\n        </Col>\n    )\n}\n\nexport default Search;",["77","78"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WritePost.tsx",["79"],"import React, { useState, ChangeEvent } from 'react';\nimport { Form, Row, Col, Label, Input, FormGroup, Button, Card, CardBody, CardHeader } from 'reactstrap';\nimport { Header } from './Main';\nimport ReturnHome from './ReturnHome';\nimport { IBlogPost } from '../../App';\n\ninterface IBlogPostRequest {\n    title: string,\n    author: string,\n    previewtext: string,\n    fulltext: string,\n    date: string\n}\n\nconst WritePost = () => {\n    const [newTitle, setNewTitle] = useState('');\n    const [newAuthor, setNewAuthor] = useState('');\n    const [newfulltext, setNewfulltext] = useState('');\n    const [newpreviewtext, setNewpreviewtext] = useState('');\n    const [newDate, setNewDate] = useState('');\n\n    const handleChangeInput = (e:ChangeEvent<HTMLInputElement>) => {\n        switch(e.target.name) {\n            case 'title':\n                setNewTitle(e.target.value);\n                break;\n            case 'author':\n                setNewAuthor(e.target.value);\n                break;\n            case 'newfulltext':\n                setNewfulltext(e.target.value);\n                break;\n            case 'newpreviewtext':\n                setNewpreviewtext(e.target.value);\n                break;\n            case 'date':\n                setNewDate(e.target.value);\n                break;\n        }\n    }\n\n    const handleAddPost = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        //make a post request to the backend, add to database\n        const newPost:IBlogPostRequest = {\n            title: newTitle,\n            author: newAuthor,\n            previewtext: newpreviewtext,\n            fulltext: newfulltext,\n            date: ''\n        }\n        console.log(newPost);\n        clearForm();\n    }\n\n    const clearForm = () => {\n        setNewTitle('');\n        setNewAuthor('');\n        setNewfulltext('');\n        setNewpreviewtext('');\n        setNewDate('');\n    }\n\n    return (\n        <>\n            <Header />\n            <Card className='m-4'>\n                <CardHeader>\n                    <h2>Create your own blog post</h2>\n                </CardHeader>\n                <CardBody>\n                    <Form onSubmit={handleAddPost}>\n                        <Row form>\n                            <Col md={6}>\n                            <FormGroup>\n                                <Label for=\"title\">Title</Label>\n                                <Input type=\"text\" name=\"title\" id=\"title\" \n                                    value={newTitle} \n                                    placeholder=\"Full Title\" \n                                    onChange={(e) => handleChangeInput(e)} />\n                            </FormGroup>\n                            </Col>\n                            <Col md={6}>\n                            <FormGroup>\n                                <Label for=\"author\">Author</Label>\n                                <Input type=\"text\" name=\"author\" id=\"author\" \n                                    value={newAuthor} \n                                    placeholder=\" Author's First and Last Name\" \n                                    onChange={(e) => handleChangeInput(e)}/>\n                            </FormGroup>\n                            </Col>\n                        </Row>\n                        <Row form>\n                        <FormGroup className='w-50'>\n                            <Label for=\"date\">Date</Label>\n                            <Input type=\"date\" name=\"date\" id=\"date\" rows='20' \n                                value={newDate} \n                                onChange={(e) => handleChangeInput(e)}/>\n                        </FormGroup>\n                        </Row>\n                        <Row form>\n                        <FormGroup className='w-100'>\n                            <Label for=\"newfulltext\">Content</Label>\n                            <Input type=\"textarea\" name=\"newfulltext\" id=\"newfulltext\" rows='20' \n                                value={newfulltext}\n                                placeholder=\"Write your blog post here...\" \n                                onChange={(e) => handleChangeInput(e)}/>\n                        </FormGroup>\n                        </Row>\n                        <Row form>\n                        <FormGroup className='w-100'>\n                            <Label for=\"newpreviewtext\">Content</Label>\n                            <Input type=\"textarea\" name=\"newpreviewtext\" id=\"newpreviewtext\" rows='5' \n                                value={newpreviewtext}\n                                placeholder=\"Optional: add preview text to peak readers' interest.\" \n                                onChange={(e) => handleChangeInput(e)}/>\n                        </FormGroup>\n                        </Row>\n                        <Row className='justify-content-end'>\n                            <Col className='col col-md-3'>\n                                <Button type='reset' className='m-1' onClick={clearForm} >Clear form</Button>\n                                <Button type='submit' className='m-1'>Submit post</Button>\n                            </Col>\n                        </Row>\n                    </Form>\n                </CardBody>\n            </Card>\n            <ReturnHome />\n        </>\n    )\n}\n\nexport default WritePost;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WriteButton.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostById.tsx",["80","81","82"],"import React, { SetStateAction, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Card, CardText, CardTitle, CardSubtitle, CardBody, Row, Col} from 'reactstrap';\nimport { Header } from './Main';\nimport { IBlogPost } from '../../App';\nimport { dateSwitcharoo } from './PostList';\nimport FavoriteIcon from './FavoriteIcon';\nimport TrashIcon from './TrashIcon';\nimport { IMainProps } from './Main';\n\n\ntype TParam = { blogID: string };\n\nconst Post = ({ blogData, list, setList, favorites, setFavorites }:IMainProps) => {\n\n    const { blogID }:TParam = useParams();\n\n    //an array with one object in it (blogIDs must be unique)\n    const currentBlog:IBlogPost[] = blogData.filter((blog: IBlogPost) => {\n        let blogNumId = parseInt(blogID);\n        return blog.blogID == blogNumId;\n    });\n    const thisBlog = currentBlog[0];\n\n    return (\n        <>\n            <Header />\n            <Card>\n                <CardBody>\n                    <CardTitle tag='h4'>{thisBlog.title}</CardTitle>\n                    <CardSubtitle tag='h5'>Written by {thisBlog.author}</CardSubtitle>\n                    <Row className='justify-content-between'>\n                        <CardText>{dateSwitcharoo(thisBlog.date)}</CardText>\n                        <Col>\n                            <FavoriteIcon post={thisBlog} favorites={favorites} setFavorites={setFavorites}/>\n                            <TrashIcon post={thisBlog} list={list} setList={setList}/>\n                        </Col>\n                    </Row>\n                    <CardText>{currentBlog[0].fulltext}</CardText>\n                </CardBody>\n            </Card>\n        </>\n    )\n}\n\nexport default Post;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/reportWebVitals.ts",[],["83","84"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/ReturnHome.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Login.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteCheckBox.tsx",["85","86","87"],"import React, { useEffect, useState } from 'react';\nimport { Col, Button, FormGroup, Label, Input } from 'reactstrap';\nimport { IBlogPost } from '../../App';\n\ntype TFaveProps = { \n    blogData: IBlogPost[],\n    favorites: number[],\n    setList: (list:React.SetStateAction<IBlogPost[]>)=>void \n}\n\nconst FavoriteCheckBox = ({ blogData, setList, favorites }:TFaveProps) => {\n    const [checked, setChecked] = useState('');\n    const [favePosts, setFavePosts] = useState<IBlogPost[]>(getFaves());\n    \n    function getFaves():IBlogPost[] {\n        let data = blogData || [];\n        return blogData.filter((post) => favorites.includes(post.blogID));\n    }\n\n    useEffect(() => {\n        setFavePosts(getFaves());\n    }, [favorites])\n\n    const handleShowFavorites = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let checkValue = event.target.value;\n        if(checkValue.length < 1) {\n            setChecked('fave');\n            setList(favePosts);\n        } else {\n            setChecked('');\n            setList(blogData);\n        }\n    }\n\n    return (\n        <Col className='col-12 m-2 m-md-0 col-md-3 text-center'>\n            <FormGroup check>\n                <Label check>\n                    <Input type='checkbox' name='fave' value={checked} onChange={handleShowFavorites}></Input>\n                    Show My Favorites\n                </Label>\n            </FormGroup>\n        </Col>\n    )\n}\n\nexport default FavoriteCheckBox;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteIcon.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/TrashIcon.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Landing.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/CreateAccount.tsx",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":1,"column":31,"nodeType":"94","messageId":"95","endLine":1,"endColumn":40},{"ruleId":"92","severity":1,"message":"93","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"88","replacedBy":"96"},{"ruleId":"90","replacedBy":"97"},{"ruleId":"92","severity":1,"message":"98","line":5,"column":10,"nodeType":"94","messageId":"95","endLine":5,"endColumn":19},{"ruleId":"92","severity":1,"message":"99","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":31},{"ruleId":"92","severity":1,"message":"93","line":1,"column":33,"nodeType":"94","messageId":"95","endLine":1,"endColumn":42},{"ruleId":"100","severity":1,"message":"101","line":21,"column":28,"nodeType":"102","messageId":"103","endLine":21,"endColumn":30},{"ruleId":"88","replacedBy":"104"},{"ruleId":"90","replacedBy":"105"},{"ruleId":"92","severity":1,"message":"106","line":2,"column":15,"nodeType":"94","messageId":"95","endLine":2,"endColumn":21},{"ruleId":"92","severity":1,"message":"107","line":16,"column":13,"nodeType":"94","messageId":"95","endLine":16,"endColumn":17},{"ruleId":"108","severity":1,"message":"109","line":22,"column":8,"nodeType":"110","endLine":22,"endColumn":19,"suggestions":"111"},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["112"],["113"],"'IBlogPost' is defined but never used.","'SetStateAction' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["112"],["113"],"'Button' is defined but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getFaves'. Either include it or remove the dependency array.","ArrayExpression",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},"Update the dependencies array to be: [favorites, getFaves]",{"range":"117","text":"118"},[716,727],"[favorites, getFaves]"]