[{"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/index.tsx":"1","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Main.tsx":"2","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostList.tsx":"3","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/App.tsx":"4","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Search.tsx":"5","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WritePost.tsx":"6","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WriteButton.tsx":"7","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostById.tsx":"8","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/reportWebVitals.ts":"9","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/ReturnHome.tsx":"10","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Login.tsx":"11","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteCheckBox.tsx":"12","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteIcon.tsx":"13","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/TrashIcon.tsx":"14","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Landing.tsx":"15","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/CreateAccount.tsx":"16","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/EditButton.tsx":"17","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Header.tsx":"18"},{"size":547,"mtime":1611251633327,"results":"19","hashOfConfig":"20"},{"size":4483,"mtime":1611726492297,"results":"21","hashOfConfig":"20"},{"size":2545,"mtime":1611724079913,"results":"22","hashOfConfig":"20"},{"size":1963,"mtime":1611728725161,"results":"23","hashOfConfig":"20"},{"size":2817,"mtime":1611426657859,"results":"24","hashOfConfig":"20"},{"size":7008,"mtime":1611724332684,"results":"25","hashOfConfig":"20"},{"size":486,"mtime":1611722344234,"results":"26","hashOfConfig":"20"},{"size":2682,"mtime":1611722735554,"results":"27","hashOfConfig":"20"},{"size":425,"mtime":1611175795640,"results":"28","hashOfConfig":"20"},{"size":476,"mtime":1611337926157,"results":"29","hashOfConfig":"20"},{"size":3724,"mtime":1611729070474,"results":"30","hashOfConfig":"20"},{"size":1507,"mtime":1611729715286,"results":"31","hashOfConfig":"20"},{"size":2512,"mtime":1611725474835,"results":"32","hashOfConfig":"20"},{"size":1524,"mtime":1611691877878,"results":"33","hashOfConfig":"20"},{"size":1641,"mtime":1611681008673,"results":"34","hashOfConfig":"20"},{"size":5196,"mtime":1611728203435,"results":"35","hashOfConfig":"20"},{"size":770,"mtime":1611723363157,"results":"36","hashOfConfig":"20"},{"size":591,"mtime":1611718901354,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"qy9wzv",{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/index.tsx",[],["82","83"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Main.tsx",["84","85","86"],"import React, { SetStateAction, useEffect } from 'react';\nimport { Row } from 'reactstrap';\nimport { useHistory } from 'react-router-dom';\nimport Search from './Search';\nimport PostList from './PostList';\nimport FavoriteCheckBox from './FavoriteCheckBox';\nimport WriteButton from './WriteButton';\nimport { IBlogPost, IMyPosts } from '../../App';\nimport Header from './Header';\nimport axios from 'axios';\n\nexport interface IMainProps { \n    blogData: IBlogPost[]; \n    setBlogData: (blogData:SetStateAction<IBlogPost[]>)=>void;\n    favorites: number[];\n    setFavorites: (favorites:SetStateAction<number[]>)=>void;\n    list: IBlogPost[];\n    setList: (list:SetStateAction<IBlogPost[]>)=>void;\n    userPosts: IMyPosts[];\n    setUserPosts: (userPosts:SetStateAction<IMyPosts[]>)=>void;\n    setCurrentToEdit: (currentToEdit:SetStateAction<IBlogPost | null> )=>void;\n}\n\nconst Main = ({ blogData, setBlogData, list, setList, favorites, setFavorites, userPosts, setUserPosts, setCurrentToEdit }: IMainProps) => {\n    const history = useHistory();\n\n    useEffect(() => {\n        const currentToken = localStorage.getItem('jwt');\n        const user = localStorage.getItem('user');\n        if(!currentToken) {\n          alert(\"Your session may have expired. Please sign in again!\")\n          history.push('/landing');\n          return;\n        }\n        (async () => {\n          try {\n            const response = await axios({\n              method: 'get',\n              url: 'http://localhost:3001/blog',\n              headers: {\"Authorization\" : currentToken}\n            })\n            if(response.status === 200) {\n              setBlogData(response.data);\n              try {\n                const userResponse = await axios({\n                    method: 'get',\n                    url: `http://localhost:3001/user/info/${user}`,\n                    headers: {\"Authorization\" : currentToken}\n                  })\n                \n                  if(userResponse.status === 200) {\n                    setUserPosts(userResponse.data);\n                  } else{\n                      console.log(userResponse);\n                      history.push('/landing')\n                  }\n              } catch(err:any){\n                console.error(err);\n                history.push('/landing')\n              }\n            } else {\n                console.log(response);\n                alert(\"Your session may have expired. Please sign in again!\")\n                history.push('/landing');\n            }\n          } catch (err:any) {\n                console.error(\"There was an error getting blog posts!\")\n                history.push('/landing');\n            }\n        })();\n      }, []); \n\n      useEffect(() => {\n         //get favorites array from users table\n          const currentToken = localStorage.getItem('jwt');\n          const user = localStorage.getItem('user');\n          (async () => {\n            try{\n              const response = await axios({\n                method: 'get',\n                url: `http://localhost:3001/user/favorites/${user}`,\n                headers: {\"Authorization\" : currentToken}\n              });\n              if(response.status === 200) {\n                console.log(response)\n                const faves = response.data.favorites;\n                setFavorites(faves);\n              } else if(response.status === 401) {\n                alert(\"Your session may have timed out. Please sign in again!\")\n                history.push('/landing')\n              }\n            }\n            catch(err) {\n              console.error(err);\n            }\n        })();\n      }, [])\n\n      useEffect(() => {\n        setList(blogData);\n      },[blogData]);\n\n    return (\n        <>\n            <Header />\n            <Row className='align-items-center'>\n                <Search blogData={blogData} setList={setList}/>\n                <FavoriteCheckBox blogData={blogData} setList={setList} favorites={favorites}/>\n                <WriteButton />\n            </Row>\n            <Row>\n                <PostList blogData={list} \n                    setBlogData={setBlogData}\n                    favorites={favorites} \n                    setFavorites={setFavorites} \n                    list={list} \n                    setList={setList}\n                    userPosts={userPosts}\n                    setUserPosts={setUserPosts}\n                    setCurrentToEdit={setCurrentToEdit}\n                    />\n            </Row>\n        </>\n    )\n}\n\nexport default Main;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostList.tsx",["87"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/App.tsx",["88"],"import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport './App.css';\nimport Main from './components/blog/Main';\nimport WritePost from './components/blog/WritePost';\nimport Post from './components/blog/PostById';\n//import data from './MOCK_DATA.json';\nimport LandingPage from './components/auth/Landing';\n\nexport interface IBlogPost {\n  blogID: number;\n  title: string;\n  author: string;\n  previewtext?: string | null;\n  fulltext?: string;\n  date: string;\n}\n\nexport interface IMyPosts {\n  blogID: number,\n  userID: number\n}\n\nfunction App() {\n  const [blogData, setBlogData] = useState<IBlogPost[]>([]);\n  const [list, setList] = useState<IBlogPost[]>(blogData);\n  const [favorites, setFavorites] = useState<number[]>([]);\n  const [userPosts, setUserPosts] = useState<IMyPosts[]>([]);\n  const [currentToEdit, setCurrentToEdit] = useState<IBlogPost | null>(null);\n\n \n  return (\n    <Router>\n      <Switch>\n        <Route path='/landing' render={() => <LandingPage setFavorites={setFavorites} setUserPosts={setUserPosts}/>} />\n        <Route exact path='/main' render={() => <Main blogData={blogData} setBlogData={setBlogData} list={list} setList={setList} favorites={favorites} setFavorites={setFavorites} userPosts={userPosts} setUserPosts={setUserPosts} setCurrentToEdit={setCurrentToEdit}/>} />\n        <Route exact path='/main/blog/:blogID' render={() => blogData.length ? <Post blogData={blogData} setBlogData={setBlogData} list={list} setList={setList} favorites={favorites} setFavorites={setFavorites} userPosts={userPosts} setUserPosts={setUserPosts} setCurrentToEdit={setCurrentToEdit} /> : <div><h4>Couldn't get post data</h4></div>} />\n        <Route exact path='/main/write' render={ () =>  <WritePost currentToEdit={currentToEdit} setCurrentToEdit={setCurrentToEdit}/>} />\n        <Redirect to='/landing' />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n",["89","90"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Search.tsx",["91"],"import React, { useState, useEffect } from 'react';\nimport { Form, Input, Button, Col, Row, FormGroup, Label } from 'reactstrap';\nimport { IBlogPost } from '../../App';\n\ntype TSearchProps = { \n    blogData: IBlogPost[], \n    setList: (list:React.SetStateAction<IBlogPost[]>)=>void \n};\n\nconst Search = ({ blogData, setList } :TSearchProps) => {\n    const [selected, setSelected] = useState<string>('title');\n    const [selectedValue, setSelectedValue] = useState<string>('');\n\n\n    const handleChangeParam = (e: React.ChangeEvent<HTMLInputElement>):void => {\n        setSelectedValue('');\n        let paramValue = e.target.value;\n        setSelected(paramValue);\n    }\n\n    const handleSetParamValue = (e: React.ChangeEvent<HTMLInputElement>):void => {\n        e.preventDefault();\n        setSelectedValue(e.target.value);\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>):void => {\n        e.preventDefault();\n        if(selectedValue.length > 0) {\n            switch(selected) {\n                case 'title':\n                    const titleFilter:IBlogPost[] = blogData.filter((blog:IBlogPost) => {\n                        return blog.title.toLowerCase().includes(selectedValue.toLowerCase()); \n                    });\n                    setList(titleFilter);\n                    break;\n                case 'author':\n                    const authorFilter:IBlogPost[] = blogData.filter((blog:IBlogPost) => {\n                        return blog.author.toLowerCase().includes(selectedValue.toLowerCase()); \n                    });\n                    setList(authorFilter);\n                    break;\n                default:\n                    console.error(\"There was a problem with the select element.\")\n            }\n        } else {\n            setList(blogData);\n        }\n    }\n\n    return (\n        <Col>\n            <Form className='m-4 p-2 w-100' onSubmit={handleSubmit} inline>\n                <Row>\n                    <FormGroup>\n                        <Label for='searchParam' className='mr-2'>Search by </Label>\n                        <Input type='select' name='searchParam' id='searchParam' onChange={handleChangeParam}>\n                            <option value='title'>Title</option>\n                            <option value='author'>Author</option>\n                        </Input>\n                    </FormGroup>\n                    <FormGroup className='m-2'>\n                        <Input type='text' id={selected} name={selected} value={selectedValue} onChange={handleSetParamValue} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Button type='submit' className='btn btn-success m-2'>Search</Button>\n                    </FormGroup>\n                </Row>\n            </Form>\n        </Col>\n    )\n}\n\nexport default Search;",["92","93"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WritePost.tsx",["94"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WriteButton.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostById.tsx",["95","96","97"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Card, CardText, CardTitle, CardSubtitle, CardBody, Row, Col} from 'reactstrap';\nimport Header from './Header';\nimport { IBlogPost } from '../../App';\nimport { dateSwitcharoo } from './PostList';\nimport FavoriteIcon from './FavoriteIcon';\nimport TrashIcon from './TrashIcon';\nimport ReturnHome from './ReturnHome';\nimport EditButton from './EditButton';\nimport { IMainProps } from './Main';\nimport { IMyPosts } from '../../App'\n\n\ntype TParam = { blogID: string };\n\nconst Post = ({ blogData, list, setList, favorites, setFavorites, userPosts, setCurrentToEdit }:IMainProps) => {\n    const { blogID }:TParam = useParams();\n\n    const [thisBlog, setThisBlog] = useState<IBlogPost>(currentBlog(blogID));\n    \n    // returns an array with one object in it (blogIDs must be unique)\n    function currentBlog (blogID: string):IBlogPost {\n            console.log(blogID)\n            let blogArr = blogData.filter((blog: IBlogPost) => {\n            let blogNumId = parseInt(blogID);\n            return blog.blogID == blogNumId;\n        })\n        return blogArr[0];\n    };\n\n    // useEffect(() => {\n    //     setThisBlog(currentBlog(blogID));\n    // }, [blogData])\n    \n\n    return (\n        <>\n            <Header />\n            {blogData.length ?\n            <Card className='m-3'>\n                <CardBody>\n                    <CardTitle tag='h4'>{thisBlog.title}</CardTitle>\n                    <CardSubtitle tag='h5'>Written by {thisBlog.author}</CardSubtitle>\n                    <Row className='justify-content-between'>\n                        <Col>\n                            <CardText>{dateSwitcharoo(thisBlog.date)}</CardText>\n                        </Col>\n                    </Row>\n                    <CardText>{thisBlog.fulltext}</CardText>\n                    <Row className='justify-items-between'>\n                        <Col>\n                            <FavoriteIcon post={thisBlog} favorites={favorites} setFavorites={setFavorites}/>\n                        </Col>\n                            {userPosts.some((userPost:IMyPosts) => userPost.blogID === thisBlog.blogID) && \n                                <Col>\n                                    <TrashIcon post={thisBlog} list={list} setList={setList}/>\n                                    <EditButton post={thisBlog} setCurrentToEdit={setCurrentToEdit}/>\n                                </Col>\n                            } \n                    </Row>\n                </CardBody>\n            </Card>\n            : <p>Waiting for post</p>}\n            <ReturnHome />\n        </>\n    )\n}\n\nexport default Post;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/reportWebVitals.ts",[],["98","99"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/ReturnHome.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Login.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteCheckBox.tsx",["100"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/FavoriteIcon.tsx",["101"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/TrashIcon.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/Landing.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/auth/CreateAccount.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/EditButton.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Header.tsx",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":71,"column":10,"nodeType":"108","endLine":71,"endColumn":12,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"110","line":97,"column":10,"nodeType":"108","endLine":97,"endColumn":12,"suggestions":"111"},{"ruleId":"106","severity":1,"message":"112","line":101,"column":9,"nodeType":"108","endLine":101,"endColumn":19,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":31,"nodeType":"116","messageId":"117","endLine":1,"endColumn":40},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"102","replacedBy":"118"},{"ruleId":"104","replacedBy":"119"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":27,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"102","replacedBy":"120"},{"ruleId":"104","replacedBy":"121"},{"ruleId":"106","severity":1,"message":"122","line":33,"column":8,"nodeType":"108","endLine":33,"endColumn":23,"suggestions":"123"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"124","line":20,"column":22,"nodeType":"116","messageId":"117","endLine":20,"endColumn":33},{"ruleId":"125","severity":1,"message":"126","line":27,"column":32,"nodeType":"127","messageId":"128","endLine":27,"endColumn":34},{"ruleId":"102","replacedBy":"129"},{"ruleId":"104","replacedBy":"130"},{"ruleId":"106","severity":1,"message":"131","line":25,"column":8,"nodeType":"108","endLine":25,"endColumn":29,"suggestions":"132"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":29,"nodeType":"116","messageId":"117","endLine":1,"endColumn":38},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history', 'setBlogData', and 'setUserPosts'. Either include them or remove the dependency array. If 'setBlogData' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["135"],"React Hook useEffect has missing dependencies: 'history' and 'setFavorites'. Either include them or remove the dependency array. If 'setFavorites' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["136"],"React Hook useEffect has a missing dependency: 'setList'. Either include it or remove the dependency array. If 'setList' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["137"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar",["133"],["134"],["133"],["134"],"React Hook useEffect has a missing dependency: 'setCurrentToEdit'. Either include it or remove the dependency array. If 'setCurrentToEdit' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["138"],"'setThisBlog' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["133"],["134"],"React Hook useEffect has a missing dependency: 'getFaves'. Either include it or remove the dependency array.",["139"],"no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [history, setBlogData, setUserPosts]",{"range":"150","text":"151"},"Update the dependencies array to be: [history, setFavorites]",{"range":"152","text":"153"},"Update the dependencies array to be: [blogData, setList]",{"range":"154","text":"155"},"Update the dependencies array to be: [currentToEdit, setCurrentToEdit]",{"range":"156","text":"157"},"Update the dependencies array to be: [favorites, blogData, getFaves]",{"range":"158","text":"159"},[2672,2674],"[history, setBlogData, setUserPosts]",[3599,3601],"[history, setFavorites]",[3663,3673],"[blogData, setList]",[1316,1331],"[currentToEdit, setCurrentToEdit]",[764,785],"[favorites, blogData, getFaves]"]