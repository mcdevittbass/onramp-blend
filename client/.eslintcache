[{"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/index.tsx":"1","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Main.tsx":"2","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostList.tsx":"3","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/App.tsx":"4","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Search.tsx":"5","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WritePost.tsx":"6","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Favorites.tsx":"7","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WriteButton.tsx":"8","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostById.tsx":"9"},{"size":547,"mtime":1611251633327,"results":"10","hashOfConfig":"11"},{"size":2291,"mtime":1611331124691,"results":"12","hashOfConfig":"11"},{"size":1066,"mtime":1611326943190,"results":"13","hashOfConfig":"11"},{"size":684,"mtime":1611272462227,"results":"14","hashOfConfig":"11"},{"size":2145,"mtime":1611331062395,"results":"15","hashOfConfig":"11"},{"size":127,"mtime":1611249638697,"results":"16","hashOfConfig":"11"},{"size":1296,"mtime":1611331314917,"results":"17","hashOfConfig":"11"},{"size":490,"mtime":1611329288448,"results":"18","hashOfConfig":"11"},{"size":994,"mtime":1611286873058,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"qy9wzv",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"22"},"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/index.tsx",[],["44","45"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Main.tsx",["46","47"],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostList.tsx",["48","49"],"import React, { ReactElement } from 'react';\nimport { Card, CardHeader, CardBody, CardTitle, CardSubtitle, Container, CardText } from 'reactstrap';\nimport { IBlogPost } from './Main';\n\ntype TProps = { blogData: IBlogPost[]; }\n\nconst PostList = ({ blogData }: TProps) => {\n\n    const logProps = () => {\n        console.log(blogData[0]);\n    }\n\n    let noResults:boolean = blogData.length > 0 ? false : true;\n\n    return (\n        <Container>\n        {!noResults && blogData.map((post:IBlogPost, i:number): ReactElement => {\n            return (\n                <Card key={post.title + i}>\n                    <CardBody>\n                        <CardTitle tag='h5'><a href={`/main/${post.blogId.$oid}`}>{post.title}</a></CardTitle>\n                        <CardSubtitle tag='h6'>Written by {post.author}</CardSubtitle>\n                        <CardText>{post.previewText}</CardText>\n                    </CardBody>\n                </Card>\n            )\n        })}\n        {noResults && <h3>No results found</h3>}\n        </Container>\n    )\n}\n\nexport default PostList;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/App.tsx",["50"],"import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport Main from './components/blog/Main';\nimport WritePost from './components/blog/WritePost';\nimport Post from './components/blog/PostById';\nimport blogData from './MOCK_DATA.json';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path='/main' component={Main} />\n        <Route path='/main/:blogId' render={() => <Post blogData={blogData} />} />\n        <Route path='/write' component={WritePost} />\n        <Redirect to='/main' />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Search.tsx",["51"],"import React, { useState } from 'react';\nimport { Form, Input, Button, Col, Row, FormGroup, Label } from 'reactstrap';\n\ntype TSearchProps = { \n    setTitle: (title:string)=>void, \n    setAuthor: (author:string)=>void\n};\n\nconst Search = ({ setTitle, setAuthor } :TSearchProps) => {\n    // const [localTitle, setLocalTitle] = useState<string>('');\n    // const [localAuthor, setLocalAuthor] = useState<string>('');\n    const [selected, setSelected] = useState<string>('title');\n    const [localValue, setLocalValue] = useState<string>('');\n\n    const handleChangeParam = (e: React.ChangeEvent<HTMLInputElement>):void => {\n        setTitle('');\n        setAuthor('');\n        let paramValue = e.target.value;\n        setSelected(paramValue);\n    }\n\n    const handleSetParams = (e: React.ChangeEvent<HTMLInputElement>):void => {\n        e.preventDefault();\n        setLocalValue(e.target.value);\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>):void => {\n        e.preventDefault();\n        if(selected == 'title') {\n            setTitle(localValue);\n        } else {\n            setAuthor(localValue);\n        }\n    }\n\n    return (\n        <Col>\n            <Form className='m-4 p-2 w-100' onSubmit={handleSubmit} inline>\n                <Row>\n                    <FormGroup>\n                        <Label for='searchParam' className='mr-2'>Search by </Label>\n                        <Input type='select' name='searchParam' id='searchParam' onChange={handleChangeParam}>\n                            <option value='title'>Title</option>\n                            <option value='author'>Author</option>\n                        </Input>\n                    </FormGroup>\n                    <FormGroup className='m-2'>\n                        <Input type='text' id={selected} name={selected} value={localValue || ''} onChange={handleSetParams} />\n                    </FormGroup>\n                    <FormGroup>\n                        <Button type='submit' className='btn btn-success m-2'>Search</Button>\n                    </FormGroup>\n                </Row>\n            </Form>\n        </Col>\n    )\n}\n\nexport default Search;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WritePost.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/Favorites.tsx",["52","53","54"],"import React, { useState } from 'react';\nimport { Col, Button, FormGroup, Label, Input } from 'reactstrap';\nimport { IBlogPost } from './Main';\n\ntype TFaveProps = { \n    blogData: IBlogPost[],\n    setList: (list:React.SetStateAction<IBlogPost[]>)=>void \n}\n\nconst FavoriteButton = ({ blogData, setList }:TFaveProps) => {\n    const [checked, setChecked] = useState('');\n\n    const handleShowFavorites = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        let checkValue = event.target.value;\n        if(checkValue == '') {\n            const favorites = blogData.filter((post:IBlogPost) => {\n                return post.favorite == true;\n            });\n            setChecked('fave');\n            setList(favorites);\n        } else {\n            setChecked('');\n            setList(blogData);\n        }\n    }\n\n    return (\n        <Col className='col-12 m-2 m-md-0 col-md-3 text-center'>\n            <FormGroup check>\n                <Label check>\n                    <Input type='checkbox' name='fave' value={checked} onChange={handleShowFavorites}></Input>\n                    Show My Favorites\n                </Label>\n            </FormGroup>\n            {/* <Button onClick={handleShowFavorites}>Show My Favorites</Button> */}\n        </Col>\n    )\n}\n\nexport default FavoriteButton;","/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/WriteButton.tsx",[],"/Users/homesweethome/Documents/Coding-Projects/Job-App-Projects/onramp-fullstack-CRUD-project-main/client/src/components/blog/PostById.tsx",["55"],"import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Card, CardText, CardTitle, CardSubtitle, CardBody} from 'reactstrap';\nimport { Header, IBlogPost } from './Main';\n\ntype TPostProps = { blogData: IBlogPost[]}\ntype TParam = { blogId: string };\n\nconst Post = ({ blogData }:TPostProps) => {\n\n    const { blogId }:TParam = useParams();\n\n    //returns an array with one object in it (blogIds must be unique)\n    const currentBlog:IBlogPost[] = blogData.filter((blog: IBlogPost) => {\n        return blog.blogId.$oid === blogId;\n    });\n\n    return (\n        <>\n            <Header />\n            <Card>\n                <CardBody>\n                    <CardTitle tag='h4'>{currentBlog[0].title}</CardTitle>\n                    <CardSubtitle tag='h5'>Written by {currentBlog[0].author}</CardSubtitle>\n                    <CardText>{currentBlog[0].fullText}</CardText>\n                </CardBody>\n            </Card>\n        </>\n    )\n}\n\nexport default Post;",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":2,"column":23,"nodeType":"62","messageId":"63","endLine":2,"endColumn":26},{"ruleId":"60","severity":1,"message":"64","line":32,"column":22,"nodeType":"62","messageId":"63","endLine":32,"endColumn":33},{"ruleId":"60","severity":1,"message":"65","line":2,"column":16,"nodeType":"62","messageId":"63","endLine":2,"endColumn":26},{"ruleId":"60","severity":1,"message":"66","line":9,"column":11,"nodeType":"62","messageId":"63","endLine":9,"endColumn":19},{"ruleId":"60","severity":1,"message":"67","line":3,"column":8,"nodeType":"62","messageId":"63","endLine":3,"endColumn":12},{"ruleId":"68","severity":1,"message":"69","line":29,"column":21,"nodeType":"70","messageId":"71","endLine":29,"endColumn":23},{"ruleId":"60","severity":1,"message":"72","line":2,"column":15,"nodeType":"62","messageId":"63","endLine":2,"endColumn":21},{"ruleId":"68","severity":1,"message":"69","line":15,"column":23,"nodeType":"70","messageId":"71","endLine":15,"endColumn":25},{"ruleId":"68","severity":1,"message":"69","line":17,"column":38,"nodeType":"70","messageId":"71","endLine":17,"endColumn":40},{"ruleId":"60","severity":1,"message":"73","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":26},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"@typescript-eslint/no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'setBlogData' is assigned a value but never used.","'CardHeader' is defined but never used.","'logProps' is assigned a value but never used.","'logo' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]